// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  address   String?
  orders    Order[]
}

model Author {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  bio       String?
  books     Book[]
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  isbn        String    @unique
  publicationDate DateTime?
  price       Float
  authorId    Int
  author      Author    @relation(fields: [authorId], references: [id])
  orders      OrderBook[]
  genres      Genre[]
  reviews     Review[]
}

model Order {
  id          Int         @id @default(autoincrement())
  customerId  Int
  customer    Customer    @relation(fields: [customerId], references: [id])
  orderDate   DateTime    @default(now())
  orderItems  OrderBook[]
  totalAmount Float
}

model OrderBook {
  orderId Int
  bookId  Int
  quantity Int
  order   Order @relation(fields: [orderId], references: [id])
  book    Book  @relation(fields: [bookId], references: [id])

  @@id([orderId, bookId])
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String @unique
  books Book[]
}

model Review{
  id Int @id @default(autoincrement())
  bookId Int
  book Book @relation(fields:[bookId], references: [id])
  rating Int @default(5)
  comment String?
  reviewDate DateTime @default(now())
}